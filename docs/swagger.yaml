basePath: /
definitions:
  dataBase.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.User:
    description: Модель пользователя с основными полями.
    properties:
      email:
        description: |-
          @Description Электронная почта пользователя
          @Example "johndoe@example.com"
        type: string
      fromDateCreate:
        description: |-
          @Description Дата и время создания пользователя
          @Example "2024-10-19T12:00:00Z"
        type: string
      fromDateUpdate:
        description: |-
          @Description Дата и время последнего обновления пользователя
          @Example "2024-10-19T12:00:00Z"
        type: string
      id:
        description: |-
          @Description Уникальный идентификатор пользователя
          @Example 1
        type: integer
      isBanned:
        description: |-
          @Description Флаг, указывающий, заблокирован ли пользователь
          @Example false
        type: boolean
      isDeleted:
        description: |-
          @Description Флаг, указывающий, удален ли пользователь
          @Example false
        type: boolean
      name:
        description: |-
          @Description Имя пользователя
          @Example "John Doe"
        type: string
      password:
        description: |-
          @Description Пароль пользователя (сохраняется в зашифрованном виде)
          @Example "password123"
        type: string
      phone:
        description: |-
          @Description Номер телефона пользователя
          @Example "+1234567890"
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  title: Cloud Application API
  version: "1.0"
paths:
  /:
    get:
      description: Инициализирует логирование, подключается к базе данных, настраивает
        маршруты и запускает HTTP-сервер.
      responses:
        "200":
          description: Сервер успешно запущен
          schema:
            type: string
        "500":
          description: Не удалось запустить сервер
          schema:
            type: string
      summary: Основная точка входа приложения.
      tags:
      - main
  /logger/error:
    post:
      description: Записывает сообщение об ошибке в лог
      parameters:
      - description: Сообщение для логирования
        in: query
        name: msg
        required: true
        type: string
      responses:
        "200":
          description: Message logged successfully
        "500":
          description: Failed to log message
      summary: Запись сообщения об ошибке
      tags:
      - logger
  /logger/info:
    post:
      description: Записывает информационное сообщение в лог
      parameters:
      - description: Сообщение для логирования
        in: query
        name: msg
        required: true
        type: string
      responses:
        "200":
          description: Message logged successfully
        "500":
          description: Failed to log message
      summary: Запись информационного сообщения
      tags:
      - logger
  /logger/init:
    post:
      description: Открывает файл для записи логов и инициализирует логгеры для разных
        уровней
      responses:
        "200":
          description: Logging initialized successfully
        "500":
          description: Failed to initialize logging
      summary: Инициализация логгирования
      tags:
      - logger
  /logger/warning:
    post:
      description: Записывает предупреждающее сообщение в лог
      parameters:
      - description: Сообщение для логирования
        in: query
        name: msg
        required: true
        type: string
      responses:
        "200":
          description: Message logged successfully
        "500":
          description: Failed to log message
      summary: Запись предупреждающего сообщения
      tags:
      - logger
  /user:
    post:
      description: Проверяет, что имя пользователя, номер телефона, пароль и email
        заполнены и соответствуют требованиям.
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Данные пользователя валидны
          schema:
            type: string
        "400":
          description: Ошибка валидации данных
          schema:
            type: string
      summary: Валидация данных пользователя для создания
    put:
      consumes:
      - application/json
      description: Updates the user details in the database.
      parameters:
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dataBase.ErrorResponse'
      summary: Update user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user from the database by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dataBase.ErrorResponse'
      summary: Delete user
    get:
      consumes:
      - application/json
      description: Retrieves a user from the database by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dataBase.ErrorResponse'
      summary: Get user by ID
    put:
      description: Проверяет, что имя пользователя, номер телефона, пароль и email
        соответствуют требованиям.
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: Данные пользователя валидны
          schema:
            type: string
        "400":
          description: Ошибка валидации данных
          schema:
            type: string
      summary: Валидация данных пользователя для обновления
  /users:
    get:
      description: Retrieve a list of users with optional filters
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of users per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Invalid request format
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Remove a user using their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Retrieve a user using their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "204":
          description: User updated successfully
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Update a user's information
      tags:
      - users
swagger: "2.0"
